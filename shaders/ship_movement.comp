#version 450

#include "includes/structs.glsl"
#include "includes/utils.glsl"
#include "includes/matrices.glsl"

layout(set = 0, binding = 3) uniform SettingsUniform {
    Settings settings;
};

layout(set = 0, binding = 4) uniform TimeBuffer {
    Time time;
};

layout(set = 1, binding = 0) buffer Ships {
    Ship ships[];
};

layout(set = 2, binding = 0) writeonly buffer ParticlesBuffer {
    Particle particles[];
};

layout(set = 2, binding = 1) buffer ParticlesInfo {
    ParticlesBufferInfo particles_info;
};

const vec3 RIGHT_ENGINE_OFFSET = vec3(
    -0.003607,
    -0.0112,
    0.012274
);
const vec3 LEFT_ENGINE_OFFSET = vec3(
    RIGHT_ENGINE_OFFSET.x,
    RIGHT_ENGINE_OFFSET.y,
    -RIGHT_ENGINE_OFFSET.z
);

const uint PARTICLES_PER_SHIP = 2;

vec3 randomish_unit_vector(vec3 seed) {
    return normalize(vec3(
        random(seed.xy) - 0.5,
        random(seed.yz) - 0.5,
        random(seed.zx) - 0.5
    ));
}

void spawn_particle(uint index, vec3 position) {
    Particle particle;
    particle.position = position;
    particle.time_alive_percentage = 0.0;
    particle.velocity = randomish_unit_vector(position) * 0.025;

    particles[index] = particle;
}

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

void main() {
    uint index = gl_GlobalInvocationID.x;

    if (index >= ships.length()) {
        return;
    }

    Ship ship = ships[index];

    ship.facing += ship.rotation_speed;
    ship.position += vec3(cos(ship.facing), 0.0, sin(ship.facing)) * 0.005;

    ship.position.xz = repeat_over_bounds(ship.position.xz, settings.ship_movement_bounds);

    ship.y_rotation_matrix = rotation_matrix_y(ship.facing);

    ships[index] = ship;

    uint particle_index = (particles_info.offset + index * PARTICLES_PER_SHIP) % particles.length();

    spawn_particle(particle_index,     ship.position + ship.y_rotation_matrix * LEFT_ENGINE_OFFSET);
    spawn_particle(particle_index + 1, ship.position + ship.y_rotation_matrix * RIGHT_ENGINE_OFFSET);

    // This info should only be updated once per invocation.
    if (index == 0) {
        particles_info.offset += ships.length() * PARTICLES_PER_SHIP;
        // Just in case the number of ships / particles has changed.
        particles_info.particle_duration = (particles.length() / ships.length() / PARTICLES_PER_SHIP) / 60.0;
    }
}

