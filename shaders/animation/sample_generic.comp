
#version 450

#include "../includes/structs.glsl"

layout(set = 0, binding = 1) uniform AnimationInfoUniform {
    AnimationInfo animation_info;
};

layout(set = 0, binding = 2) writeonly buffer LocalTransforms {
    Similarity local_transforms[];
};

layout(set = 0, binding = 3) readonly buffer AnimationStates {
    AnimationState animation_states[];
};

layout(set = 1, binding = 0) readonly buffer Inputs {
    float inputs[];
};

layout(set = 1, binding = 1) readonly buffer Outputs {
    SAMPLE_TYPE outputs[];
};

layout(set = 1, binding = 2) readonly buffer Channels {
    Channel channels[];
};

#include "interpolation.glsl"

SAMPLE_TYPE sample_cubic_spline(float t, Channel channel, out bool invalid) {
    invalid = t < inputs[channel.inputs_offset] || t > inputs[channel.inputs_offset + channel.num_inputs - 1];

    uint i = 0;

    while (i < channel.num_inputs && inputs[channel.inputs_offset + i + 1] < t) {
        i++;
    }

    float previous_time = inputs[channel.inputs_offset + i];
    float next_time = inputs[channel.inputs_offset + i + 1];
    float delta = next_time - previous_time;
    float from_start = t - previous_time;
    float factor = from_start / delta;

    SAMPLE_TYPE starting_point = outputs[channel.outputs_offset + i * 3 + 1];
    SAMPLE_TYPE starting_out_tangent = outputs[channel.outputs_offset + i * 3 + 2];

    SAMPLE_TYPE ending_in_tangent = outputs[channel.outputs_offset + i * 3 + 3];
    SAMPLE_TYPE ending_point = outputs[channel.outputs_offset + i * 3 + 4];

    return cublic_spline_interpolate(
        starting_point,
        starting_out_tangent,
        ending_point,
        ending_in_tangent,
        delta,
        factor
    );
}

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

void main() {
    uint index = gl_GlobalInvocationID.x;

    uint channels_per_animation = channels.length();

    uint animation_index = index / channels_per_animation;
    uint channel_index = index % channels_per_animation;
    uint node_index = animation_index * animation_info.num_nodes;

    if (animation_index >= animation_info.num_instances) {
        return;
    }

    float time = animation_states[animation_index].time;

    Channel channel = channels[channel_index];
    bool invalid = false;
    SAMPLE_TYPE value = sample_cubic_spline(time, channel, invalid);
    if (!invalid) {
        local_transforms[node_index + channel.node_index].FIELD = value;
    }
}
