#version 450

#include "includes/structs.glsl"

layout(set = 0, binding = 0) buffer Ships {
    Ship ships[];
};

layout(set = 1, binding = 0) uniform ShipMovementSettingsUniform {
    ShipMovementSettings settings;
};

layout(set = 2, binding = 0) buffer writeonly ParticlesBuffer {
    Particle particles[];
};

layout(set = 2, binding = 1) buffer ParticlesInfo {
    ParticlesBufferInfo particles_info;
};

mat3 rotation_matrix_y(float theta) {
    return mat3(
        cos(theta), 0, sin(theta),
        0, 1, 0,
        -sin(theta), 0, cos(theta)
    );
}

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

void main() {
    uint index = gl_GlobalInvocationID.x;

    if (index >= ships.length()) {
        return;
    }

    Ship ship = ships[index];

    ship.facing += ship.rotation_speed;
    ship.position += vec3(cos(ship.facing), 0.0, sin(ship.facing)) * 0.005;

    vec2 ship_horizontal = ship.position.xz;
    bvec2 is_over_bounds = greaterThan(abs(ship_horizontal), vec2(settings.bounds));
    vec2 offset = vec2(is_over_bounds) * sign(ship_horizontal) * (settings.bounds * 2.0);
    ship.position.xz = ship_horizontal - offset;

    ship.y_rotation_matrix = rotation_matrix_y(ship.facing);

    ships[index] = ship;

    uint particle_index = (particles_info.offset + index) % particles.length();

    particles[particle_index].position = ship.position;

    if (index == 0) {
        particles_info.offset += ships.length();
    }
}

