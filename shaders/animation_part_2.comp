
#version 450

#include "includes/structs.glsl"
#include "includes/matrices.glsl"

mat4 similarity_to_mat4(Similarity sim) {
    mat4 scale_matrix = scale_matrix(sim.scale);

    return scale_matrix;
}

Similarity similarity_mul(Similarity a, Similarity b) {
    Similarity c;
    c.scale = a.scale * b.scale;
    return c;
}

layout(set = 0, binding = 0) writeonly buffer JointTransforms {
    mat4 joint_transforms[];
};

layout(set = 0, binding = 1) readonly buffer LocalTransforms {
    Similarity local_transforms[];
};

// todo: this is basically just used as storage within the shader. Can we remove?
layout(set = 0, binding = 2) buffer GlobalTransforms {
    Similarity global_transforms[];
};

layout(set = 0, binding = 3) readonly buffer DepthFirstNodes {
    NodeAndParent depth_first_nodes[];
};

layout(set = 0, binding = 4) readonly buffer JointIndicesToNodeIndices {
    uint joint_indices_to_node_indices[];
};

layout(set = 0, binding = 5) readonly buffer InverseBindMatrices {
    mat4 inverse_bind_matrices[];
};

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

void main() {
    uint index = gl_GlobalInvocationID.x;

    uint num_nodes = depth_first_nodes.length();
    uint num_joints = joint_indices_to_node_indices.length();

    uint transforms_offset = index * num_nodes;
    uint joints_offset = index * num_joints;

    if (transforms_offset >= global_transforms.length()) {
        return;
    }

    for (uint i = 0; i < depth_first_nodes.length(); i++) {
        NodeAndParent indices = depth_first_nodes[i];

        uint node_index = transforms_offset + indices.node_index;
        Similarity local_transform = local_transforms[node_index];

        if (indices.parent_index != -1) {
            Similarity parent_transform = global_transforms[transforms_offset + indices.parent_index];
            global_transforms[node_index] = similarity_mul(parent_transform, local_transform);
        } else {
            global_transforms[node_index] = local_transform;
        }
    }

    for (uint joint_index = 0; joint_index < joint_indices_to_node_indices.length(); joint_index++) {
        uint node_index = joint_indices_to_node_indices[joint_index];
        mat4 inverse_bind_matrix = inverse_bind_matrices[joint_index];
        mat4 global_transform = similarity_to_mat4(global_transforms[node_index]);

        joint_transforms[joints_offset + joint_index] = global_transform * inverse_bind_matrix;
    }
}
