
#version 450

#include "../includes/structs.glsl"
#include "../includes/matrices.glsl"
#include "../includes/rotor.glsl"

mat4 similarity_to_mat4(Similarity sim) {
    mat4 scale_matrix = scale_matrix(sim.scale);
    mat4 translation_matrix = translation_matrix(sim.translation);
    mat4 rotation_matrix = mat4(rotor_to_matrix(sim.rotation));

    return translation_matrix * rotation_matrix * scale_matrix;
}

layout(set = 0, binding = 0) writeonly buffer JointTransforms {
    mat4 joint_transforms[];
};

layout(set = 0, binding = 1) uniform AnimationInfoUniform {
    AnimationInfo animation_info;
};

layout(set = 0, binding = 2) readonly buffer LocalTransforms {
    Similarity local_transforms[];
};

layout(set = 0, binding = 3) buffer AnimationStates {
    AnimationState animation_states[];
};

layout(set = 0, binding = 4) buffer GlobalTransforms {
    mat4 global_transforms[];
};

layout(set = 0, binding = 5) readonly buffer DepthFirstNodes {
    NodeAndParent depth_first_nodes[];
};

layout(set = 0, binding = 6) readonly buffer JointIndicesToNodeIndices {
    uint joint_indices_to_node_indices[];
};

layout(set = 0, binding = 7) readonly buffer InverseBindMatrices {
    mat4 inverse_bind_matrices[];
};

layout(set = 1, binding = 4) uniform TimeBuffer {
    Time time;
};

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

void main() {
    uint index = gl_GlobalInvocationID.x;

    uint nodes_offset = index * animation_info.num_nodes;
    uint joints_offset = index * animation_info.num_joints;

    if (index >= animation_info.num_instances) {
        return;
    }

    for (uint i = 0; i < animation_info.num_nodes; i++) {
        NodeAndParent indices = depth_first_nodes[i];

        uint node_index = nodes_offset + indices.node_index;
        mat4 local_transform = similarity_to_mat4(local_transforms[node_index]);

        if (indices.parent_index != -1) {
            mat4 parent_transform = global_transforms[nodes_offset + indices.parent_index];
            global_transforms[node_index] = parent_transform * local_transform;
        } else {
            global_transforms[node_index] = local_transform;
        }
    }

    for (uint joint_index = 0; joint_index < animation_info.num_joints; joint_index++) {
        uint node_index = nodes_offset + joint_indices_to_node_indices[joint_index];
        mat4 inverse_bind_matrix = inverse_bind_matrices[joint_index];
        mat4 global_transform = global_transforms[node_index];

        joint_transforms[joints_offset + joint_index] = global_transform * inverse_bind_matrix;
    }

    AnimationState state = animation_states[index];
    animation_states[index].time = mod(state.time + time.delta_time, state.animation_duration);
}
